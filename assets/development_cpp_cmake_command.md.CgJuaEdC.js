import{_ as e,c as s,o as t,ag as i}from"./chunks/framework.ko2zIC2c.js";const h=JSON.parse('{"title":"install 命令","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"development/cpp/cmake/command.md","filePath":"development/cpp/cmake/command.md","lastUpdated":1745939355000}'),l={name:"development/cpp/cmake/command.md"};function n(d,a,c,o,p,r){return t(),s("div",null,a[0]||(a[0]=[i(`<h1 id="install-ming-ling" tabindex="-1">install 命令 <a class="header-anchor" href="#install-ming-ling" aria-label="Permalink to &quot;install 命令&quot;">​</a></h1><p>在 CMake 中，<code>install(TARGETS ...)</code> 命令用于指定如何将构建的目标（例如可执行文件或库）安装到系统中，特别是在在打包和分发软件时需要使用。</p><p><code>install(TARGETS ...)</code> 命令的基本语法（函数签名/Signatures）如下</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TARGETS &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;... [EXPORT &lt;export-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [RUNTIME_DEPENDENCIES &lt;arg&gt;...|RUNTIME_DEPENDENCY_SET &lt;set-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [&lt;artifact-option&gt;...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [&lt;artifact-kind&gt; &lt;artifact-option&gt;...]...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [INCLUDES DESTINATION [&lt;dir&gt; ...]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span></code></pre></div><blockquote><p>完整命令和使用可以参考官方文档 <a href="https://cmake.org/cmake/help/latest/command/install.html" target="_blank" rel="noreferrer"><em>install</em></a>（中文 <a href="https://cmake-doc.readthedocs.io/zh-cn/latest/command/install.html" target="_blank" rel="noreferrer"><em>安装</em></a>）</p></blockquote><p>一步步来看</p><ul><li><code>TARGETS</code>，指定了要安装的目标，后面跟着一个或多个由 <code>add_executable()</code> 或 <code>add_library()</code> 创建的目标名称。</li><li><code>ARCHIVE</code>、<code>LIBRARY</code>、<code>RUNTIME</code> 等关键字，指定了目标的不同类型。它们可以用来为不同类型的输出设置不同的安装规则。比如静态库可以用 <code>ARCHIVE</code>，动态库用 <code>LIBRARY</code>，可执行文件用 <code>RUNTIME</code>。</li><li><code>DESTINATION</code>，指定安装路径。默认情况下，这个路径是相对于 <code>CMAKE_INSTALL_PREFIX</code> 变量的值。如果用户没有特别指定 <code>CMAKE_INSTALL_PREFIX</code>，那么默认会使用系统的标准位置（通常是 <code>/usr/local</code> 在类 Unix 系统上）。</li></ul>`,7)]))}const k=e(l,[["render",n]]);export{h as __pageData,k as default};
