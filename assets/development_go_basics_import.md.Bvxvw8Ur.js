import{_ as s,c as a,o as t,ag as n}from"./chunks/framework.ko2zIC2c.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{"outline":[3,6],"date":"2024-10-10T00:00:00.000Z"},"headers":[],"relativePath":"development/go/basics/import.md","filePath":"development/go/basics/import.md","lastUpdated":1745680375000}'),e={name:"development/go/basics/import.md"};function l(h,i,p,k,o,d){return t(),a("div",null,i[0]||(i[0]=[n(`<h2 id="bao-dao-ru" tabindex="-1">包导入 <a class="header-anchor" href="#bao-dao-ru" aria-label="Permalink to &quot;包导入&quot;">​</a></h2><h3 id="ji-ben-dao-ru" tabindex="-1">基本导入 <a class="header-anchor" href="#ji-ben-dao-ru" aria-label="Permalink to &quot;基本导入&quot;">​</a></h3><p>Go 中导入包可以使用 <code>import</code> 关键字。导入的包可以是标准库的包，也可以是第三方包，也可以是你自己写的包。</p><p>单行导入：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">math</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><p>多行导入：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">math</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="bie-ming-dao-ru" tabindex="-1">别名导入 <a class="header-anchor" href="#bie-ming-dao-ru" aria-label="Permalink to &quot;别名导入&quot;">​</a></h3><p>如果有同名冲突的包，可以使用别名来解决：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crypto/rand</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mrand </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">math/rand</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将名称替换为mrand避免冲突</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果导入的包名字很长，可以使用别名来简化：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hwtm </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helloworldtestmodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><h3 id="dian-cao-zuo" tabindex="-1">点操作 <a class="header-anchor" href="#dian-cao-zuo" aria-label="Permalink to &quot;点操作&quot;">​</a></h3><p>在导入包时，可以使用 <code>.</code> 操作符来简化调用包中的函数。例如导入 <code>fmt</code> 包后，可以直接调用 <code>fmt.Println</code> 函数，而不需要写 <code>fmt.</code>。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> . </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>但是不推荐使用这种方式，因为会使代码变得难以阅读，也容易产生冲突</p></blockquote><h3 id="kong-bai-dao-ru" tabindex="-1">空白导入 <a class="header-anchor" href="#kong-bai-dao-ru" aria-label="Permalink to &quot;空白导入&quot;">​</a></h3><p>如果导入的包没有使用，编译器会报错。但是有时候我们只是想导入包，而不使用包中的函数（有可能执行一些初始化任务），可以使用 <code>_</code> 来代替包名，这样就不会报错了。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/go-sql-driver/mysql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><h3 id="dao-ru-lu-jing" tabindex="-1">导入路径 <a class="header-anchor" href="#dao-ru-lu-jing" aria-label="Permalink to &quot;导入路径&quot;">​</a></h3><p>Go 语言的包是通过导入路径来区分的。导入路径是唯一的，不同的包不能有相同的导入路径。导入路径可以是相对路径，也可以是绝对路径。绝对路径一般是指 <code>github.com/username/projectname</code> 这种形式。</p><h3 id="bao-de-chu-shi-hua" tabindex="-1">包的初始化 <a class="header-anchor" href="#bao-de-chu-shi-hua" aria-label="Permalink to &quot;包的初始化&quot;">​</a></h3><p>Go 语言中包的初始化是自动的，当导入包时，会自动执行包中的 <code>init</code> 函数。<code>init</code> 函数没有参数，也没有返回值。<code>init</code> 函数在包中可以有多个，执行顺序是按照导入包的顺序执行的。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;init function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// init function</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main function</span></span></code></pre></div><ul><li><code>init</code> 优先于 <code>main</code> 函数执行。</li><li><code>init</code> 函数在包中只会执行一次，即使包被导入多次，<code>init</code> 函数也只会执行一次。</li><li><code>init</code> 函数是不能被调用的，只能在包中自动执行。</li><li><code>init</code> 函数的执行顺序是按照导入包的顺序执行的，例如：<code>import &quot;a&quot;; import &quot;b&quot;;</code>，则 <code>a</code> 包的 <code>init</code> 函数会先执行，然后是 <code>b</code> 包的 <code>init</code> 函数。</li><li>如果一个包中有多个 <code>init</code> 函数，执行顺序是按照代码中的顺序执行的。</li><li>如果一个包中有多个文件，每个文件中都有 <code>init</code> 函数，执行顺序是按照文件名的字典序执行的。</li></ul>`,25)]))}const g=s(e,[["render",l]]);export{c as __pageData,g as default};
