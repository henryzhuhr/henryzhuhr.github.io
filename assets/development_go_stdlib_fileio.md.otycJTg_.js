import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ko2zIC2c.js";const g=JSON.parse('{"title":"文件处理","description":"","frontmatter":{},"headers":[],"relativePath":"development/go/stdlib/fileio.md","filePath":"development/go/stdlib/fileio.md","lastUpdated":1745680375000}'),l={name:"development/go/stdlib/fileio.md"};function h(p,s,t,k,d,r){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="wen-jian-chu-li" tabindex="-1">文件处理 <a class="header-anchor" href="#wen-jian-chu-li" aria-label="Permalink to &quot;文件处理&quot;">​</a></h1><p>文件处理的标准库油：</p><ul><li><code>os</code>，负责OS文件系统交互的具体实现</li><li><code>io</code>，读写IO的抽象层</li><li><code>fs</code>，文件系统的抽象层</li></ul><h2 id="wen-jian" tabindex="-1">文件 <a class="header-anchor" href="#wen-jian" aria-label="Permalink to &quot;文件&quot;">​</a></h2><h3 id="da-kai-wen-jian" tabindex="-1">打开文件 <a class="header-anchor" href="#da-kai-wen-jian" aria-label="Permalink to &quot;打开文件&quot;">​</a></h3><p>使用 <code>os.OpenFile</code> 函数打开文件 ，返回一个 <code>os.File</code> 对象，函数签名如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">flag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">perm</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> os</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FileMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>name</code> 是文件路径，<code>flag</code> 是打开文件的模式，<code>perm</code> 是文件权限。</p><p><code>src/os/file.go</code> 文件中定义了 <code>flag</code> 的取值：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Flags to OpenFile wrapping those of the underlying system. Not all</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// flags may be implemented on a given system.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 必须指定 O_RDONLY, O_WRONLY, O_RDWR 之一</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    O_RDONLY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> syscall.O_RDONLY </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// read-only  只读</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    O_WRONLY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> syscall.O_WRONLY </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// write-only 只写</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    O_RDWR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> syscall.O_RDWR   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// read-write 读写</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 其他的值可以用于控制行为</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    O_APPEND</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> syscall.O_APPEND </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 附加写模式 (在文件末尾写)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    O_CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> syscall.O_CREAT  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果不存在，则创建一个新文件。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    O_EXCL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> syscall.O_EXCL   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 与 O_CREATE 一起使用时，文件必须不存在。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    O_SYNC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> syscall.O_SYNC   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以同步IO的方式打开文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    O_TRUNC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> syscall.O_TRUNC  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当打开的时候截断可写的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>flag</code> 可以是 <code>O_RDONLY</code>、<code>O_WRONLY</code>、<code>O_RDWR</code> 之一，也可以和其他的标志位进行或运算，例如 <code>O_CREATE|O_WRONLY</code> 表示如果文件不存在则创建一个新文件并以只写模式打开。</p><p><code>perm</code> 是文件权限，<code>src/os/types.go</code> 文件中定义了 <code>os.FileMode</code> 类型：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The defined file mode bits are the most significant bits of the [FileMode].</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The nine least-significant bits are the standard Unix rwxrwxrwx permissions.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The values of these bits should be considered part of the public API and</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// may be used in wire protocols or disk representations: they must not be</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// changed, although new bits might be added.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The single letters are the abbreviations</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // used by the String method&#39;s formatting.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ModeDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.ModeDir        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// d: is a directory</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ModeAppend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.ModeAppend     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a: append-only</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ModeExclusive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.ModeExclusive  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// l: exclusive use</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ModeTemporary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.ModeTemporary  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// T: temporary file; Plan 9 only</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ModeSymlink</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.ModeSymlink    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// L: symbolic link</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ModeDevice</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.ModeDevice     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// D: device file</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ModeNamedPipe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.ModeNamedPipe  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// p: named pipe (FIFO)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ModeSocket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.ModeSocket     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// S: Unix domain socket</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ModeSetuid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.ModeSetuid     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// u: setuid</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ModeSetgid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.ModeSetgid     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// g: setgid</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ModeCharDevice</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.ModeCharDevice </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// c: Unix character device, when ModeDevice is set</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ModeSticky</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.ModeSticky     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// t: sticky</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ModeIrregular</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.ModeIrregular  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ?: non-regular file; nothing else is known about this file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Mask for the type bits. For regular files, none will be set.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ModeType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.ModeType</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ModePerm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.ModePerm </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Unix permission bits, 0o777</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,13)]))}const y=i(l,[["render",h]]);export{g as __pageData,y as default};
