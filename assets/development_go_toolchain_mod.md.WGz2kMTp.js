import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.ko2zIC2c.js";const k=JSON.parse('{"title":"Go Modules 包管理","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"development/go/toolchain/mod.md","filePath":"development/go/toolchain/mod.md","lastUpdated":1745680375000}'),o={name:"development/go/toolchain/mod.md"};function l(t,s,d,p,h,c){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="go-modules-bao-guan-li" tabindex="-1">Go Modules 包管理 <a class="header-anchor" href="#go-modules-bao-guan-li" aria-label="Permalink to &quot;Go Modules 包管理&quot;">​</a></h1><h2 id="go-modules-chan-sheng-yuan-yin" tabindex="-1">Go Modules 产生原因 <a class="header-anchor" href="#go-modules-chan-sheng-yuan-yin" aria-label="Permalink to &quot;Go Modules 产生原因&quot;">​</a></h2><p>早期 Go 语言的包管理是通过 <code>GOPATH</code> 环境变量来实现的，所有的第三方包都会下载到 <code>GOPATH</code> 目录下，这样就会导致不同项目之间的包版本冲突，而且也不方便管理。</p><p>在没有 Go Modules 机制之前，Go 项目的包管理是通过 <code>GOPATH</code> 环境变量来实现的，开发的项目都会放在 <code>GOPATH</code> 目录下，所有的第三方包也会下载到 <code>GOPATH</code> 目录下，这样就会导致不同项目之间的包版本冲突，而且也不方便管理。</p><p>为了解决上述的问题，从 Go 1.11 <a href="https://go.dev/doc/go1.11#modules" target="_blank" rel="noreferrer">开始引入了 Go Modules 机制</a>，通过环境变量 <code>GO111MODULE</code> 启用。Go 1.13 版本后，<a href="https://go.dev/ref/mod" target="_blank" rel="noreferrer">Go Modules</a> 成为默认的包管理工具，并通过 <code>go.mod</code> 文件来管理项目的依赖。</p><blockquote><p>Go Modules 的使用可以参考官方文章 <a href="https://go.dev/blog/using-go-modules" target="_blank" rel="noreferrer"><em>Using Go Modules</em></a></p></blockquote><h2 id="go-modules-jian-jie" tabindex="-1">Go Modules 简介 <a class="header-anchor" href="#go-modules-jian-jie" aria-label="Permalink to &quot;Go Modules 简介&quot;">​</a></h2><p>Go Modules 是 Go 1.11 版本引入的包管理工具，可以通过环境变量 <code>GO111MODULE</code> 设置，有三个值 <code>off</code>、<code>on</code> 和 <code>auto</code>(default)，也可以通过 <code>go env -w</code> 命令设置</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GO111MODULE=on</span></span></code></pre></div><p>Go 1.13 版本后，Go Modules 成为默认的包管理工具，通过 <code>go mod</code> 命令来管理项目的依赖，因此不需要设置 <code>GO111MODULE</code> 环境变量。</p><h2 id="go-mod-ming-ling" tabindex="-1">Go Mod 命令 <a class="header-anchor" href="#go-mod-ming-ling" aria-label="Permalink to &quot;Go Mod 命令&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mod</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Go mod provides access to operations on modules.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Note that support for modules is built into all the go commands,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># not just &#39;go mod&#39;. For example, day-to-day adding, removing, upgrading,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># and downgrading of dependencies should be done using &#39;go get&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># See &#39;go help modules&#39; for an overview of module functionality.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Usage:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#         go mod &lt;command&gt; [arguments]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The commands are:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#         download    download modules to local cache</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#         edit        edit go.mod from tools or scripts</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#         graph       print module requirement graph</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#         init        initialize new module in current directory</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#         tidy        add missing and remove unused modules</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#         vendor      make vendored copy of dependencies</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#         verify      verify dependencies have expected content</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#         why         explain why packages or modules are needed</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use &quot;go help mod &lt;command&gt;&quot; for more information about a command.</span></span></code></pre></div><h2 id="shi-yong-go-mod-chuang-jian-xiang-mu-bing-guan-li" tabindex="-1">使用 Go Mod 创建项目并管理 <a class="header-anchor" href="#shi-yong-go-mod-chuang-jian-xiang-mu-bing-guan-li" aria-label="Permalink to &quot;使用 Go Mod 创建项目并管理&quot;">​</a></h2><p>创建 modules 的命令</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> github.com/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">usernam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">projectnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><blockquote><p><code>go.mod</code> 文件一旦创建后，它的内容将会被 go toolchain 全面掌控。go toolchain 会在各类命令执行时，比如 <code>go get</code>、<code>go build</code>、<code>go mod</code> 等修改和维护 <code>go.mod</code> 文件。</p></blockquote><p>拉取私有仓库</p><p>Go 1.13 版本后，拉取私有仓库的方式发生了变化，需要配置环境变量，否则会报错</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GOPRIVATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">github.com/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>同时由于 <code>go get</code> 默认使用的是 https 协议，如果你的私有仓库是 ssh 协议，需要配置 <code>~/.gitconfig</code> 文件，添加如下配置</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> url.&quot;git@git.xxx.com&quot;.insteadOf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://git.xxx.com/&quot;</span></span></code></pre></div><h2 id="can-kao-zi-liao" tabindex="-1">参考资料 <a class="header-anchor" href="#can-kao-zi-liao" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://cloud.tencent.com/developer/article/1593734" target="_blank" rel="noreferrer">Go Module详细使用教程，包管理不在难-腾讯云开发者社区-腾讯云</a></li></ul>`,23)]))}const g=a(o,[["render",l]]);export{k as __pageData,g as default};
