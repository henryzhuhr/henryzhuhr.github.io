import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ko2zIC2c.js";const t="/assets/STM32CubeMX-New_Project.d8WRk4zO.png",l="/assets/STM32CubeMX-MCU_Selector.25MBbHRh.png",h="/assets/STM32CubeMX-pinoutConfig.CTHrbQqQ.png",p="/assets/STM32CubeMX-ProjectManger.CtwyPnes.png",y=JSON.parse('{"title":"在 Apple Silicon Mac 上开发 STM32","description":"","frontmatter":{},"headers":[],"relativePath":"hardware/stm32-mac/stm32-mac.md","filePath":"hardware/stm32-mac/stm32-mac.md","lastUpdated":1724588569000}'),k={name:"hardware/stm32-mac/stm32-mac.md"};function r(o,s,d,F,c,g){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="zai-apple-silicon-mac-shang-kai-fa-stm32" tabindex="-1">在 Apple Silicon Mac 上开发 STM32 <a class="header-anchor" href="#zai-apple-silicon-mac-shang-kai-fa-stm32" aria-label="Permalink to &quot;在 Apple Silicon Mac 上开发 STM32&quot;">​</a></h1><ul><li><a href="#在-apple-silicon-mac-上开发-stm32">在 Apple Silicon Mac 上开发 STM32</a><ul><li><a href="#配置开发环境">配置开发环境</a><ul><li><a href="#软件安装">软件安装</a><ul><li><a href="#1-stm32cubemx">1. STM32Cubemx</a></li><li><a href="#2-openocd">2. OpenOCD</a></li><li><a href="#3-arm-gcc-工具链">3. ARM-GCC 工具链</a></li></ul></li><li><a href="#代码环境">代码环境</a></li></ul></li><li><a href="#初始化项目">初始化项目</a></li><li><a href="#项目编译和烧录">项目编译和烧录</a><ul><li><a href="#编译工程">编译工程</a></li><li><a href="#使用-openocd-烧录到开发板">使用 OpenOCD 烧录到开发板</a></li></ul></li><li><a href="#数据">数据</a></li><li><a href="#参考文章">参考文章</a></li></ul></li></ul><h2 id="pei-zhi-kai-fa-huan-jing" tabindex="-1">配置开发环境 <a class="header-anchor" href="#pei-zhi-kai-fa-huan-jing" aria-label="Permalink to &quot;配置开发环境&quot;">​</a></h2><h3 id="ruan-jian-an-zhuang" tabindex="-1">软件安装 <a class="header-anchor" href="#ruan-jian-an-zhuang" aria-label="Permalink to &quot;软件安装&quot;">​</a></h3><h4 id="1-stm32cubemx" tabindex="-1">1. STM32Cubemx <a class="header-anchor" href="#1-stm32cubemx" aria-label="Permalink to &quot;1. STM32Cubemx&quot;">​</a></h4><p>STM32Cubemx(<a href="https://www.st.com/en/development-tools/stm32cubemx.html#get-software" target="_blank" rel="noreferrer">官方下载</a>) 是 x86 架构的，在 Apple silicon 上运行需要 rosetta2 的支持。</p><blockquote><p>安装时，需要右键 <code>显示包内容</code>，然后在 <code>Contents/MacOS</code> 点击安装包</p></blockquote><h4 id="2-openocd" tabindex="-1">2. OpenOCD <a class="header-anchor" href="#2-openocd" aria-label="Permalink to &quot;2. OpenOCD&quot;">​</a></h4><p><a href="https://openocd.org" target="_blank" rel="noreferrer">OpenOCD(Open On-Chip Debugger)</a>是一个开源的调试工具(<a href="https://sourceforge.net/p/openocd/code/ci/master/tree/" target="_blank" rel="noreferrer">源码</a>)，提供针对嵌入式设备的调试、系统编程和边界扫描功能。但是在 Mac 无法直接使用，因此这里使用一个为 Mac 编译好的 <a href="https://github.com/xpack-dev-tools/openocd-xpack" target="_blank" rel="noreferrer"><code>xpack-dev-tools/openocd-xpack</code></a>，进入到 <a href="https://github.com/xpack-dev-tools/openocd-xpack/releases" target="_blank" rel="noreferrer">Releases</a> 中下载 <code>xpack-openocd-&lt;version&gt;-darwin-arm64.tar.gz</code>。</p><p>解压后添加到环境变量中，这里使用 <code>~/.zshrc</code>，添加如下内容：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OPENOCD_HOME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/xpack-openocd-&lt;version&gt;&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # openocd</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH:$OPENOCD_HOME/bin</span></span></code></pre></div><h4 id="3-arm-gcc-gong-ju-lian" tabindex="-1">3. ARM-GCC 工具链 <a class="header-anchor" href="#3-arm-gcc-gong-ju-lian" aria-label="Permalink to &quot;3. ARM-GCC 工具链&quot;">​</a></h4><p><a href="https://developer.arm.com/downloads/-/gnu-rm" target="_blank" rel="noreferrer">arm-none-eabi-gcc</a> 是一个开源的 ARM 架构的编译器，这里使用 <a href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm" target="_blank" rel="noreferrer">GNU Arm Embedded Toolchain</a>。</p><p>官方没有提供 Apple Silicon 的版本，因此这里使用一个为 Mac 编译好的项目 <a href="https://github.com/xpack-dev-tools/arm-none-eabi-gcc-xpack" target="_blank" rel="noreferrer"><code>xpack-dev-tools/arm-none-eabi-gcc-xpack</code></a>，进入到 <a href="https://github.com/xpack-dev-tools/arm-none-eabi-gcc-xpack/releases" target="_blank" rel="noreferrer">Releases</a> 中下载 <code>xpack-arm-none-eabi-gcc-&lt;version&gt;-xpack-darwin-arm64.tar.gz</code>。</p><p>解压后添加到环境变量中，这里使用 <code>~/.zshrc</code>，添加如下内容：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ARM_GCC_HOME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/xpack-arm-none-eabi-gcc-&lt;version&gt;&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # arm-none-eabi-gcc</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH:$ARM_GCC_HOME/bin</span></span></code></pre></div><h3 id="dai-ma-huan-jing" tabindex="-1">代码环境 <a class="header-anchor" href="#dai-ma-huan-jing" aria-label="Permalink to &quot;代码环境&quot;">​</a></h3><h2 id="chu-shi-hua-xiang-mu" tabindex="-1">初始化项目 <a class="header-anchor" href="#chu-shi-hua-xiang-mu" aria-label="Permalink to &quot;初始化项目&quot;">​</a></h2><ol><li>创建项目 打开 STM32CubeMX</li></ol><p>新建项目 <code>File -&gt; New Project</code></p><p><img src="`+t+'" alt="New_Project"></p><p>选择芯片(左侧 <code>Commercial Part Number</code> 搜索)，然后右上角 <code>Start Project</code><img src="'+l+'" alt="MCU_Selector"></p><ol><li>配置项目</li></ol><ul><li><p><strong>Pinout&amp;Configuration</strong>: 设置芯片 Pinout <img src="'+h+'" alt="Pinout"></p></li><li><p><strong>Project Manger -&gt; Project</strong>: 设置项目名称和路径, <code>Toolchain/IDE</code> 选择 <code>Makefile</code><img src="'+p+`" alt="ProjectManger"></p></li><li><p><strong>Project Manger -&gt; Code Generator</strong>: 选择 <code>Copy only the necessary library files</code>(不要复制全部库目录，否则项目很大)。勾选 <code>Generate peripheral initialization as a pair of &#39;.c/.h&#39; files per peripheral</code>，这样会生成 <code>.c/.h</code> 文件，方便查看和修改。</p></li></ul><h2 id="xiang-mu-bian-yi-he-shao-lu" tabindex="-1">项目编译和烧录 <a class="header-anchor" href="#xiang-mu-bian-yi-he-shao-lu" aria-label="Permalink to &quot;项目编译和烧录&quot;">​</a></h2><h3 id="bian-yi-gong-cheng" tabindex="-1">编译工程 <a class="header-anchor" href="#bian-yi-gong-cheng" aria-label="Permalink to &quot;编译工程&quot;">​</a></h3><p>进入到工程目录下，执行 <code>make</code>，编译成功后会生成 <code>build</code> 目录，包含编译后的文件。该过程会结合 <code>arm-none-eabi-gcc</code> 进行编译，具体细节可以查看 <code>Makefile</code>。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-size</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/stm32-car.elf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   text</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     bss</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     dec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     hex</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filename</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   3564</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      20</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    1572</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    5156</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    1424</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/stm32-car.elf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-objcopy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ihex</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/stm32-car.elf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/stm32-car.hex</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-objcopy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> binary</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/stm32-car.elf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/stm32-car.bin</span></span></code></pre></div><h3 id="shi-yong-openocd-shao-lu-dao-kai-fa-ban" tabindex="-1">使用 OpenOCD 烧录到开发板 <a class="header-anchor" href="#shi-yong-openocd-shao-lu-dao-kai-fa-ban" aria-label="Permalink to &quot;使用 OpenOCD 烧录到开发板&quot;">​</a></h3><p>运行下面的命令，启动 OpenOCD，连接到开发板。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> openocd_scripts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$OPENOCD_HOME/openocd/scripts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openocd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $openocd_scripts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/interface/stlink.cfg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $openocd_scripts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/target/stm32g4x.cfg</span></span></code></pre></div><blockquote><p>如果出现 “macos 无法验证“openocd的开发者。你确定要打开它吗？”，到<code>系统设置 -&gt; 安全性与隐私 -&gt; 通用</code>，点击“仍要打开”即可。</p></blockquote><p>出现以下内容，表示连接成功，其中可以获得**三种端口连接协议方式(tcl,telnet,gdb)**和其他一些一些信息</p><ul><li>tcl 监听端口：6666</li><li>telnet 监听端口：4444</li><li>gdb 监听端口：3333 (调试功能使用)</li><li>时钟频率：2000 kHz</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xPack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Open</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> On-Chip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Debugger</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.12.0-01004-g9ea7f3d64-dirty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (2023-01-30-17:03)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Licensed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> under</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GNU</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GPL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">For</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bug</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reports,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> read</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        http://openocd.org/doc/doxygen/bugs.html</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> auto-selecting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> first</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> available</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> session</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> transport</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hla_swd&quot;.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> To</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> override</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;transport select &lt;transport&gt;&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> selected</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> transport</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> took</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> over</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> low-level</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> control.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> results</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> might</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> differ</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plain</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JTAG/SWD</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Listening</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6666</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tcl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> connections</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Listening</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4444</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> telnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> connections</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clock</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> speed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kHz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STLINK</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> V3J9M3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (API </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) VID:PID 0483:374E</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> voltage:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.285220</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [stm32g4x.cpu] Cortex-M4 r0p1 processor detected</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [stm32g4x.cpu] target has 6 breakpoints, 4 watchpoints</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> starting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gdb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stm32g4x.cpu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3333</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Listening</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3333</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gdb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> connections</span></span></code></pre></div><p>保持上述连接的状态下，在另一个终端中，启动 <code>telnet</code>，连接到 OpenOCD</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">telnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4444</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 连接成功后，输入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> halt  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 目标芯片挂起，相当于关机</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &gt; flash write_image erase &lt;需要烧写的目标文件&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flash write_image erase build/stm32-car.bin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reset </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 目标芯片复位</span></span></code></pre></div><p>也可以一次性执行</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> openocd_scripts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$OPENOCD_HOME/openocd/scripts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openocd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $openocd_scripts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/interface/stlink.cfg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $openocd_scripts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/target/stm32g4x.cfg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;reset halt; wait_halt; flash write_image erase build/stm32-car.bin 0x08000000;&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;reset run; shutdown&quot;</span></span></code></pre></div><ul><li><code>-c</code> 表示要执行的选项， <code>init</code> 初始化</li><li><code>wait_halt</code> 是等待目标芯片挂起，必须有</li></ul><h2 id="shu-ju" tabindex="-1">数据 <a class="header-anchor" href="#shu-ju" aria-label="Permalink to &quot;数据&quot;">​</a></h2><p><a href="https://www.st.com/zh/microcontrollers-microprocessors/stm32g474re.html" target="_blank" rel="noreferrer">STM32G474RE</a></p><h2 id="can-kao-wen-zhang" tabindex="-1">参考文章 <a class="header-anchor" href="#can-kao-wen-zhang" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/41517198" target="_blank" rel="noreferrer">跟我一起学OpenOCD</a></li></ul>`,44)]))}const E=i(k,[["render",r]]);export{y as __pageData,E as default};
