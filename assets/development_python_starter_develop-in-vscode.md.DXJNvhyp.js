import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.ko2zIC2c.js";const c=JSON.parse('{"title":"在 VSCode 中开发 Python","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"development/python/starter/develop-in-vscode.md","filePath":"development/python/starter/develop-in-vscode.md","lastUpdated":1745681479000}'),n={name:"development/python/starter/develop-in-vscode.md"};function l(o,s,p,h,r,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="zai-vscode-zhong-kai-fa-python" tabindex="-1">在 VSCode 中开发 Python <a class="header-anchor" href="#zai-vscode-zhong-kai-fa-python" aria-label="Permalink to &quot;在 VSCode 中开发 Python&quot;">​</a></h1><h2 id="cha-jian-an-zhuang" tabindex="-1">插件安装 <a class="header-anchor" href="#cha-jian-an-zhuang" aria-label="Permalink to &quot;插件安装&quot;">​</a></h2><h3 id="ji-ben-de-python-cha-jian" tabindex="-1">基本的 Python 插件 <a class="header-anchor" href="#ji-ben-de-python-cha-jian" aria-label="Permalink to &quot;基本的 Python 插件&quot;">​</a></h3><p>下面几个插件是 Python 开发必备的插件：</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python" target="_blank" rel="noreferrer">Python</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance" target="_blank" rel="noreferrer">Pylance</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy" target="_blank" rel="noreferrer">Python Debugger</a></li></ul><p>安装上述插件后，可以在 VSCode 的设置（全局的 <code>settings.json</code> 文件）中添加如下配置</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;python.analysis.autoImportCompletions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -- 自动导入补全 import</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="jing-tai-dai-ma-jian-cha-pylint" tabindex="-1">静态代码检查 Pylint <a class="header-anchor" href="#jing-tai-dai-ma-jian-cha-pylint" aria-label="Permalink to &quot;静态代码检查 Pylint&quot;">​</a></h3><p>在 VSCode 中搜索安装 <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.pylint" target="_blank" rel="noreferrer">Pylint</a>，启用 Pylint 对 Python 代码进行静态检查。</p><p>安装完成后，可以在 VSCode 的设置（全局的 <code>settings.json</code> 文件）中添加如下配置</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;pylint.enabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -- 启用 Pylint </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;pylint.importStrategy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;useBundled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;pylint.args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // &quot;--disable=invalid-name,&quot;,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 建议开启检查</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--disable=missing-module-docstring&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--disable=W0612,W0631,W0703,W0621,W0613,W0611,W1308,C0411,C0111,C0103,C0301,C0304,C0305,E1101,R0913,R0914,R0915,R0903&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>&quot;pylint.enabled&quot;: true</code> 表示启用 Pylint，实际上安装 Pylint 插件后默认是启用的。但是如果需要禁用 Pylint，可以设置为 <code>false</code>。、</li><li><code>&quot;pylint.importStrategy&quot;: &quot;useBundled&quot;</code> 表示使用 Pylint 插件自带的 import 排序规则。</li><li><code>&quot;pylint.args&quot;</code> 表示 Pylint 的参数，可以参考 <a href="https://pylint.pycqa.org/en/latest/user_guide/configuration/all-options.html" target="_blank" rel="noreferrer">Pylint Standard Checkers</a> 进行配置，这里提供的是一些常用的禁用规则： <ul><li><a href="https://pylint.pycqa.org/en/latest/user_guide/configuration/all-options.html#disable" target="_blank" rel="noreferrer"><code>--disable</code></a> 表示禁用指定的检查器，多个检查器之间用逗号分隔。例如禁用 <code>invalid-name</code> 是禁用变量名不符合规范的检查、<code>missing-module-docstring</code> 是禁用模块缺少文档字符串的检查。</li><li><code>--disable=W0612,...</code> 则是禁用指定的警告，多个警告之间用逗号分隔。警告可以参考 <a href="https://pylint.pycqa.org/en/latest/user_guide/messages/index.html" target="_blank" rel="noreferrer">Pylint Messages</a>。</li></ul></li></ul><h3 id="dao-ru-bao-pai-xu-isort" tabindex="-1">导入包排序 isort <a class="header-anchor" href="#dao-ru-bao-pai-xu-isort" aria-label="Permalink to &quot;导入包排序 isort&quot;">​</a></h3><p>在 VSCode 中搜索安装 <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.isort" target="_blank" rel="noreferrer">isort</a>，启用 isort 对 Python 代码进行 import 排序。</p><p>安装完成后，可以在 VSCode 的设置（全局的 <code>settings.json</code> 文件）中添加如下配置</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;python.sortImports.args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--profile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;black&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>&quot;python.sortImports.args&quot;</code> 表示 isort 的参数，可以参考 <a href="https://pycqa.github.io/isort/docs/configuration/profiles.html" target="_blank" rel="noreferrer">isort Command Line Usage</a> 进行配置，这里提供的是使用 <code>black</code> 风格的 import 排序规则。也可以使用 <code>pycharm</code>、<code>google</code>、<code>django</code> 等风格。</li></ul><p>isort 也提供了一些 <a href="https://pycqa.github.io/isort/docs/configuration/action_comments.html#isort-off" target="_blank" rel="noreferrer">Action Comments</a>，可以通过注释的方式来控制 import 排序。</p><p>例如，可以使用 <code># isort: off</code> 和 <code># isort: on</code> 来标记不想被 isort 排序的代码块。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># isort: off</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># isort: on</span></span></code></pre></div><p>其他的 Action Comments 还有：</p><ul><li><code>isort: skip_file</code></li><li><code>isort: skip</code></li><li><code>isort: split</code></li></ul><h3 id="lei-xing-jian-cha-mypy-type-checker" tabindex="-1">类型检查 Mypy Type Checker <a class="header-anchor" href="#lei-xing-jian-cha-mypy-type-checker" aria-label="Permalink to &quot;类型检查 Mypy Type Checker&quot;">​</a></h3><p>在 VSCode 中搜索安装 <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.mypy-type-checker" target="_blank" rel="noreferrer">Mypy</a>，启用 Mypy 对 Python 代码进行类型检查。</p><p>安装完成后，可以在 VSCode 的设置（全局的 <code>settings.json</code> 文件）中添加如下配置</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;mypy-type-checker.importStrategy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;useBundled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;mypy-type-checker.args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--follow-imports=skip&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--show-column-numbers=True&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--warn_return_any=True&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--warn-unreachable=True&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>&quot;mypy-type-checker.importStrategy&quot;: &quot;useBundled&quot;</code> 表示使用 Mypy 插件自带的 import 排序规则。</li><li><code>&quot;mypy-type-checker.args&quot;</code> 表示 Mypy 的参数，可以参考 <a href="https://mypy.readthedocs.io/en/stable/command_line.html" target="_blank" rel="noreferrer">Mypy Command Line Options</a> 进行配置，这里提供的是一些常用的参数： <ul><li><a href="https://mypy.readthedocs.io/en/stable/command_line.html#cmdoption-mypy-follow-imports" target="_blank" rel="noreferrer"><code>--follow-imports</code></a> 表示控制 Mypy 如何处理导入。<code>skip</code> 表示跳过导入，<code>normal</code> 表示正常导入，<code>silent</code> 表示静默导入。</li><li><a href="https://mypy.readthedocs.io/en/stable/command_line.html#cmdoption-mypy-show-column-numbers" target="_blank" rel="noreferrer"><code>--show-column-numbers</code></a> 表示显示错误的列号。</li><li><a href="https://mypy.readthedocs.io/en/stable/command_line.html#cmdoption-mypy-warn-return-any" target="_blank" rel="noreferrer"><code>--warn-return-any</code></a> 表示警告返回值类型为 <code>Any</code>。</li><li><a href="https://mypy.readthedocs.io/en/stable/command_line.html#cmdoption-mypy-warn-unreachable" target="_blank" rel="noreferrer"><code>--warn-unreachable</code></a> 表示警告不可达的代码。</li></ul></li></ul><h3 id="dai-ma-ge-shi-hua-gong-ju-black" tabindex="-1">代码格式化工具 Black <a class="header-anchor" href="#dai-ma-ge-shi-hua-gong-ju-black" aria-label="Permalink to &quot;代码格式化工具 Black&quot;">​</a></h3><p>在 VSCode 中搜索安装 <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.black-formatter" target="_blank" rel="noreferrer">Black Formatter</a>，启用 Black 对 Python 代码进行格式化。</p><p>安装完成后，可以在 VSCode 的设置（全局的 <code>settings.json</code> 文件）中添加如下配置</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;python.formatting.provider&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;black&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;python.formatting.blackArgs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--line-length&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;88&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--skip-string-normalization&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>&quot;python.formatting.provider&quot;: &quot;black&quot;</code> 表示使用 Black 作为 Python 代码格式化工具。</li><li><code>&quot;python.formatting.blackArgs&quot;</code> 表示 Black 的参数，可以参考 <a href="https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#command-line-options" target="_blank" rel="noreferrer">Black Command Line Usage</a>。 <ul><li>[<code>--line-length</code>](<a href="https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#l-line-length" target="_blank" rel="noreferrer">line</a> 表示设置行宽，默认是 <code>88</code>。</li><li><a href="https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#s-skip-string-normalization" target="_blank" rel="noreferrer"><code>--skip-string-normalization</code></a> 表示跳过字符串规范化，由于 Black 会<strong>默认将单引号字符串转换为双引号字符串</strong>，可以使用该参数跳过这个规范化。</li></ul></li></ul><p>如果有部分代码不想被 Black 格式化，可以在代码中使用 <code># fmt: skip</code>、 <code># fmt: off</code> 和 <code># fmt: on</code> 标记 <a href="https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#ignoring-sections" target="_blank" rel="noreferrer">Ignoring sections</a></p><ul><li><code># fmt: skip</code> 表示跳过当前行的格式化。</li><li><code># fmt: off</code> 和 <code># fmt: on</code> 表示跳过这两个标记之间的代码块的格式化。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># fmt: off</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is a long string that should not be wrapped.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># fmt: on</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is a long string that should be wrapped.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># fmt: skip</span></span></code></pre></div><p>可以使用混合注释，例如结合 pylint 和 Black 的注释</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># fmt: skip # pylint # noqa</span></span></code></pre></div><p>或者逗号分隔的列表</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># fmt: skip; pylint; noqa</span></span></code></pre></div>`,39)]))}const y=i(n,[["render",l]]);export{c as __pageData,y as default};
