import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ko2zIC2c.js";const l="/assets/cmake-process.BfPgByIL.svg",g=JSON.parse('{"title":"CMake 基础：编译可执行文件","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"development/cpp/cmake/compile-executable-file.md","filePath":"development/cpp/cmake/compile-executable-file.md","lastUpdated":1745939355000}'),t={name:"development/cpp/cmake/compile-executable-file.md"};function p(h,s,k,d,o,c){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="cmake-ji-chubian-yi-ke-zhi-xing-wen-jian" tabindex="-1">CMake 基础：编译可执行文件 <a class="header-anchor" href="#cmake-ji-chubian-yi-ke-zhi-xing-wen-jian" aria-label="Permalink to &quot;CMake 基础：编译可执行文件&quot;">​</a></h1><h2 id="jian-jie" tabindex="-1">简介 <a class="header-anchor" href="#jian-jie" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>在 Windows 下可以使用 Visual Studio 来构建一个 C++ 项目，但是在 Linux 下，通常使用 CMake 生成 Makefile 来构建项目。</p><p>要学习 CMake，首先需要了解 CMake 的基本语法，然后通过一个简单的示例来学习如何使用 CMake 来构建一个 C++ 项目，生成一个 Linux 下的可执行文件。</p><h2 id="xiang-mu-jie-gou" tabindex="-1">项目结构 <a class="header-anchor" href="#xiang-mu-jie-gou" aria-label="Permalink to &quot;项目结构&quot;">​</a></h2><p>一个 CMake 项目结构可以如下</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">demo/hello-world</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CMakeLists.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-world.cpp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CMakeLists.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build.sh</span></span></code></pre></div><p>在此，需要做一些约定，但这不是必须的，应该根据项目需要进行目录构建。</p><p>在这里，我们约定 <code>demo</code> 目录下存放所有的示例程序，例如在本 demo 中的程序是 <code>hello-world</code> ，因此源文件存放在 <code>demo/hello-world</code> 下，包含 <code>hello-world.cpp</code> 文件。</p><blockquote><p>可能会疑问，为什么主程序不是 <code>main.cpp</code> ，而是 <code>hello-world.cpp</code> 。一方面是为了改变大家的刻板印象，因为大多数教程都是 <code>main.cpp</code> ，另一方面是为了说明，源文件的名称并不是固定的，可以随意命名，只要在 <code>CMakeLists.txt</code> 中指定即可。</p></blockquote><h2 id="bian-xie-yuan-wen-jian" tabindex="-1">编写源文件 <a class="header-anchor" href="#bian-xie-yuan-wen-jian" aria-label="Permalink to &quot;编写源文件&quot;">​</a></h2><p>入门地，我们先编写一个简单的 <code>hello-world.cpp</code> 文件，内容如下</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;string&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::string name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (argc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argv[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Cpp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (argc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Usage: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argv[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; [name]&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>程序的入口是 main 函数，它接受两个参数：<code>argc</code> 和 <code>argv[]</code>。<code>argc</code> 表示命令行参数的数量， <code>argv</code> 是一个字符指针数组，包含了实际的参数值。其中，<code>argv[0]</code> 是程序的名称，<code>argv[1]</code> 是第一个参数，以此类推。</p><p>因此，我们可以通过 <code>argc</code> 和 <code>argv[]</code> 来判断是否有参数传入，如果有参数传入，则输出参数值，否则输出默认值 <code>Cpp</code>。</p><blockquote><p>简单的命令行参数可以使用上述方法，但是对于复杂的命令行参数，可以使用 <a href="https://github.com/CLIUtils/CLI11" target="_blank" rel="noreferrer"><code>CLI11</code></a>(依赖C++11)、<a href="https://github.com/p-ranav/argparse" target="_blank" rel="noreferrer"><code>argparse</code></a>(依赖C++17)、<a href="https://github.com/gflags/gflags" target="_blank" rel="noreferrer">gfalgs</a>、<code>getopt</code> 或者 <code>boost::program_options</code>(依赖 boost) 等库来处理。</p></blockquote><h2 id="shi-yong-cmake-gou-jian-xiang-mu" tabindex="-1">使用 CMake 构建项目 <a class="header-anchor" href="#shi-yong-cmake-gou-jian-xiang-mu" aria-label="Permalink to &quot;使用 CMake 构建项目&quot;">​</a></h2><h3 id="gen-mu-lu-cmakeliststxt" tabindex="-1">根目录 CMakeLists.txt <a class="header-anchor" href="#gen-mu-lu-cmakeliststxt" aria-label="Permalink to &quot;根目录 CMakeLists.txt&quot;">​</a></h3><p>根目录下的 <code>CMakeLists.txt</code> 为整个项目做一些基本配置，包括项目所需CMake最低版本、项目名称、编译器等，文件内容如下</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># CMakeLists.txt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.10 FATAL_ERROR)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello-cpp) </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_subdirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(demo)</span></span></code></pre></div><p><code>cmake_minimum_required</code> 规定构建当前项目的所需CMake的最低版本，当构建项目使用的CMake不满足做个最低版本要求，则会出现报错，添加 <code>FATAL_ERROR</code> 则在不满足条件的情况下产生致命报错</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.10)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.10 FATAL_ERROR)</span></span></code></pre></div><blockquote><p>CMake语法不区分大小写（即 <code>cmake_minimum_required</code>与 <code>CMAKE_MINIMUN_REQUIRED</code> 是一样的），但是参数区分大小写的</p></blockquote><p><code>project</code> 声明项目名称(<code>hello-cpp</code>)，该语句必须在设置编译器后面，同时也可以添加参数 <code>LANGUAGES</code> 来显式声明项目的编程语言</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello-cpp)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello-cpp LANGUAGES CXX)</span></span></code></pre></div><blockquote><p>CXX代表C++，C++是CMake默认的编程语言</p></blockquote><p>完成对整个项目的基本配置，我们就可以添加子目录 <code>add_subdirectory</code> 来进行编译，我们添加子目录 <code>demo</code> 来编译可执行文件</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_subdirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(demo)</span></span></code></pre></div><p>在这条语句之后，构建系统会在 <code>demo</code> 目录下寻找 <code>CMakeLists.txt</code> 文件，然后执行 <code>demo/CMakeLists.txt</code> 中的内容。</p><h3 id="kuo-zhan-gen-mu-lu-cmakeliststxt" tabindex="-1">扩展根目录 CMakeLists.txt <a class="header-anchor" href="#kuo-zhan-gen-mu-lu-cmakeliststxt" aria-label="Permalink to &quot;扩展根目录 CMakeLists.txt&quot;">​</a></h3><p>上述一小节中的 <code>CMakeLists.txt</code> 只是对项目做了基本配置，但是可以对项目做更多配置，例如设置编译器、编译选项、链接选项等</p><p>可以在 <code>CMakeLists.txt</code> 中选择编译器、设置编译器的标准，并且导出编译命令生成 <code>compile_commands.json</code> 文件</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.10 FATAL_ERROR)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置编译器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMAKE_C_COMPILER /usr/bin/gcc)      // [!code ++]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMAKE_CXX_COMPILER /usr/bin/g++)    // [!code ++]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置 C++ 标准为 C++11</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMAKE_CXX_STANDARD 11)              // [!code ++]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 导出编译命令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMAKE_EXPORT_COMPILE_COMMANDS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   // [!code ++]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># C++ 编译选项</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">CMAKE_CXX_FLAGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${CMAKE_CXX_FLAGS} -Wall -Wextra -Werror&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) // [!code ++]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello-cpp) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 必须在设置编译器后面</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_subdirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(demo)</span></span></code></pre></div><p><code>compile_commands.json</code> 文件是一个 JSON 文件，包含了编译器的编译命令，可以结合 clangd 工具链来进行代码补全、语法检查等。</p><h3 id="demo-mu-lu-cmakeliststxt" tabindex="-1">demo 目录 CMakeLists.txt <a class="header-anchor" href="#demo-mu-lu-cmakeliststxt" aria-label="Permalink to &quot;demo 目录 CMakeLists.txt&quot;">​</a></h3><p><code>demo/CMakeLists.txt</code> 文件就比较简单了，仅仅用于组织程序，文件内容如下</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># demo/CMakeLists.txt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_subdirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello-world)</span></span></code></pre></div><p>在随后更多的示例中，我们会在 <code>demo</code> 目录下添加更多的示例程序，因此在 <code>demo/CMakeLists.txt</code> 中添加 <code>add_subdirectory</code> 来编译更多的示例程序，可以注释掉不需要的示例程序，只编译需要的示例程序。</p><h3 id="hello-world-mu-lu-cmakeliststxt" tabindex="-1">hello-world 目录 CMakeLists.txt <a class="header-anchor" href="#hello-world-mu-lu-cmakeliststxt" aria-label="Permalink to &quot;hello-world 目录 CMakeLists.txt&quot;">​</a></h3><p><code>demo/hello-world/CMakeLists.txt</code> 文件用于配置编译可执行文件，文件内容如下</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># demo/hello-world/CMakeLists.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 包含目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include_directories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/include)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加可执行文件 hello-world</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello-world hello-world.cpp)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义安装规则</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TARGETS hello-world DESTINATION bin)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义 uninstall 目标</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GNUInstallDirs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_custom_target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uninstall</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    COMMAND</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> \${CMAKE_COMMAND}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -E echo </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Uninstalling...&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    COMMAND</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> \${CMAKE_COMMAND}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -E remove -f </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${CMAKE_INSTALL_PREFIX}/bin/hello-world&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 你可以添加更多的 remove 命令来删除其他安装的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>该文件较为重要，因此在随后的部分中会详细介绍。</p><h2 id="pei-zhi-bian-yi-ke-zhi-xing-wen-jian" tabindex="-1">配置编译可执行文件 <a class="header-anchor" href="#pei-zhi-bian-yi-ke-zhi-xing-wen-jian" aria-label="Permalink to &quot;配置编译可执行文件&quot;">​</a></h2><h3 id="yin-ru-tou-wen-jian" tabindex="-1">引入头文件 <a class="header-anchor" href="#yin-ru-tou-wen-jian" aria-label="Permalink to &quot;引入头文件&quot;">​</a></h3><p><code>demo/hello-world/CMakeLists.txt</code> 文件中，首先是包含目录 <code>include_directories</code>，这里我们没有包含任何头文件，因此可以省略</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include_directories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/include)</span></span></code></pre></div><h3 id="tian-jia-ke-zhi-xing-wen-jian" tabindex="-1">添加可执行文件 <a class="header-anchor" href="#tian-jia-ke-zhi-xing-wen-jian" aria-label="Permalink to &quot;添加可执行文件&quot;">​</a></h3><p><code>add_executable</code> 用于添加可执行文件，文件名为 <code>hello-world</code>，源文件为 <code>hello-world.cpp</code></p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello-world hello-world.cpp)</span></span></code></pre></div><p>如果有多个源文件，可以通过 <code>add_executable</code> 来添加多个源文件，例如</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello-world hello-world.cpp other.cpp)</span></span></code></pre></div><p>但是需要确保 <code>hello-world.cpp</code> 和 <code>other.cpp</code> 中的 <code>main</code> 函数只有一个，否则会出现重复定义的错误。</p><h3 id="ding-yi-an-zhuang-gui-ze" tabindex="-1">定义安装规则 <a class="header-anchor" href="#ding-yi-an-zhuang-gui-ze" aria-label="Permalink to &quot;定义安装规则&quot;">​</a></h3><p><code>install</code> 用于定义安装规则，将可执行文件 <code>hello-world</code> 安装到 <code>bin</code> 目录下</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TARGETS hello-world DESTINATION bin)</span></span></code></pre></div><p>当然也可以写成另一种方式便于理解</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TARGETS     hello-world </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        DESTINATION bin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><code>TARGETS</code> 指定要安装的目标，<code>TARGETS hello-world</code> 表示安装 <code>hello-world</code> 可执行文件</li><li><code>DESTINATION</code> 指定安装路径，<code>DESTINATION bin</code> 表示安装到 <code>bin</code> 目录下。该路径应该是一个相对路径，相对于 <code>CMAKE_INSTALL_PREFIX</code> 的路径</li><li><code>CMAKE_INSTALL_PREFIX</code> 是安装目录，默认是 <code>/usr/local</code></li><li>可以通过 <code>cmake -DCMAKE_INSTALL_PREFIX=/path/to/install</code> 来指定安装目录</li><li>如果不在外部指定的情况下，会安装到系统默认的安装目录，通常是 <code>/usr/local/bin</code> 下；如果指定了安装目录，那么会安装到 <code>/path/to/install/bin</code> 下</li></ul><blockquote><p>安装命令 install 的细节在此不展开</p></blockquote><h3 id="ding-yi-uninstall-mu-biao" tabindex="-1">定义 uninstall 目标 <a class="header-anchor" href="#ding-yi-uninstall-mu-biao" aria-label="Permalink to &quot;定义 uninstall 目标&quot;">​</a></h3><p><code>add_custom_target</code> 用于定义自定义目标，这里定义了 <code>uninstall</code> 目标，用于卸载安装的文件</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_custom_target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uninstall</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    COMMAND</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> \${CMAKE_COMMAND}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -E echo </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Uninstalling...&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    COMMAND</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> \${CMAKE_COMMAND}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -E remove -f </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${CMAKE_INSTALL_PREFIX}/bin/hello-world&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="gou-jian-xiang-mu" tabindex="-1">构建项目 <a class="header-anchor" href="#gou-jian-xiang-mu" aria-label="Permalink to &quot;构建项目&quot;">​</a></h2><p>编写完项目的全部 <code>CMakeLists.txt</code> 文件后，接下来就是如何构建项目了。</p><p>CMake 是一个<strong>跨平台构建系统生成器 (cross-platform build system generator)</strong>，CMake 本身并不直接构建项目，而是根据用户提供的配置文件(<code>CMakeLists.txt</code>)，生成适合不同构建工具（Unix Makefile、Ninja、Visual Studio等）的构建文件，然后使用构建工具来构建项目。</p><blockquote><p>「构建文件」描述构建系统应当如何操作才能编译代码，例如 <code>Makefile</code>、<code>build.ninja</code>、<code>.sln</code> 等文件</p></blockquote><p>不同系统平台下有默认的构建工具，例如：</p><ul><li>GNU/Linux 和 macOS 系统上，<code>Unix Makefile</code> 是默认的生成器</li><li>Windows上，<code>Visual Studio</code> 是默认的生成器</li><li>Windows上，可以安装 <code>MinGW</code> 来使用 <code>MinGW Makefiles</code></li></ul><p><img src="`+l+`" alt=""></p><p>使用 CMake 配置项目并生成构建器 (generator) ，可以通过 <code>cmake -h</code> 查看可用的生成器（<code>*</code> 标记的是默认生成器）:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Generators</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The following generators are available on this platform (* marks default):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># * Unix Makefiles               = Generates standard UNIX makefiles.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   Ninja                        = Generates build.ninja files.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ...</span></span></code></pre></div><p>一般的生成构建文件流程是，首先新建一个目录 <code>build</code> ，在 <code>build</code> 目录下，通过指定上级目录的 <code>CMakeLists.txt</code> 来调用 CMake 配置项目并生成构建器</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # CMakeLists.txt 在上级目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Ninja&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 或指定平台可用的生成器</span></span></code></pre></div><blockquote><p>可以直接在项目根目录下中执行 <code>cmake .</code> 构建构建，这是源代码内构建，但是这种做法会在根目录（源代码目录）下生成配置文件，会将源代码和项目的生成树混合，这是非常不推荐的。因此，一般来说，需要在源代码外构建项目，即在源代码目录外新建一个目录 <code>build</code> ，并在 <code>build</code> 目录下构建项目。</p></blockquote><p>当出现如下输出，则已经成功配置项目(<code>Configuring done</code>)，并且生成了构建文件(<code>Generating done</code>)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Configuring</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> done</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Generating</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> done</span></span></code></pre></div><p>你可以在 <code>build</code> 目录下，看到下列文件（这里以 <code>Unix Makefile</code> 为例）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CMakeCache.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CMakeFiles</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake_install.cmake</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compile_commands.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CMakeFiles</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake_install.cmake</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-world</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CMakeFiles</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake_install.cmake</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Makefile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Makefile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Makefile</span></span></code></pre></div><p>可以看到 <code>build</code> 目录的结构和源代码结构是一样的，每一个 <code>CMakeLists.txt</code> 文件都会生成一个对应的 <code>Makefile</code> 和 <code>CMakeFiles</code> 目录，用于编译项目，还有一些其他文件：</p><ul><li><code>Makefile</code> : 命令 <code>make</code> 将运行指令来编译项目。</li><li><code>CMakefiles</code> ：临时文件目录，CMake用于检测操作系统、编译器等。</li><li><code>CMakeCache.txt</code> ：如文件名所示，CMake缓存。CMake在重新运行配置时使用这个文件，如果重新配置项目，会生成新的 <code>CMakeCache.txt</code> 文件。</li><li><code>cmake_install.cmake</code> ：处理安装规则的CMake脚本，在项目安装时使用。</li><li><code>compile_commands.json</code> ：编译命令文件，用于 clangd 工具链。</li></ul><h2 id="bian-yi-xiang-mu" tabindex="-1">编译项目 <a class="header-anchor" href="#bian-yi-xiang-mu" aria-label="Permalink to &quot;编译项目&quot;">​</a></h2><p>随后就可以开始编译可执行文件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>你可以在 <code>build</code> 目录下，看到下列文件：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CMakeCache.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CMakeFiles</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake_install.cmake</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compile_commands.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CMakeFiles</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake_install.cmake</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-world</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CMakeFiles</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake_install.cmake</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-world</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Makefile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Makefile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Makefile</span></span></code></pre></div><p>编译后就可以看到生成的可执行文件 <code>demo/hello-world/hello-world</code>，可以直接执行，但是这种目录中的可执行文件不太方便，可以通过 <code>make install</code> 安装到指定目录下</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>安装后，可执行文件会被安装到 <code>/usr/local/bin</code> 目录下，可以直接执行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello-world</span></span></code></pre></div><p>或切换到 <code>/usr/local/bin</code> 目录下执行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./hello-world</span></span></code></pre></div><p>如果不希望安装到 <code>/usr/local/bin</code> 目录下，可以通过 <code>-DCMAKE_INSTALL_PREFIX</code> 来指定安装目录</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_INSTALL_PREFIX=..</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>然后可以在 <code>../bin</code> 目录下执行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这时候的目录是在 build 目录下，因此需要返回上级目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ../bin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./hello-world</span></span></code></pre></div><h2 id="clangd-de-shi-yong" tabindex="-1">clangd 的使用 <a class="header-anchor" href="#clangd-de-shi-yong" aria-label="Permalink to &quot;clangd 的使用&quot;">​</a></h2><p><a href="https://clangd.llvm.org/installation" target="_blank" rel="noreferrer">clangd</a> 是一个基于 Clang 的 C++ 语言服务器，可以用于代码补全、语法检查等。 clangd 支持的特性可以参考文档 <a href="https://clangd.llvm.org/features" target="_blank" rel="noreferrer">Features</a></p><p>在上述 demo 中，我们已经生成了 <code>compile_commands.json</code> 文件，可以使用 clangd 来进行代码补全、语法检查等。</p><p>首先安装 clangd （容器中已经安装了 clangd）</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clangd</span></span></code></pre></div><p>VSCode 对 clangd 的支持很好，可以安装 <a href="https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.vscode-clangd" target="_blank" rel="noreferrer">clangd 插件</a>以启用 clangd</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ul><li>clangd 插件和 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools" target="_blank" rel="noreferrer">C/C++ 插件</a>是冲突的，因此在安装 clangd 插件时，需要禁用 C/C++ 插件。</li></ul></div><p>下列是一些常用的配置选项，添加到 <code>.vscode/settings.json</code> 文件的 <code>clangd.arguments</code> 列表中</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;clangd.arguments&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--clang-tidy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开启clang-tidy</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--clang-tidy-checks=performance-*,bugprone-*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--j=4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 后台线程数，可根据机器配置自行调整</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--query-driver=/usr/bin/clang++&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--all-scopes-completion&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 全代码库补全</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--completion-style=detailed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 详细补全</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--header-insertion=iwyu&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--pch-storage=disk&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果内存够大可以关闭这个选项</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--log=error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;--background-index&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上述的配置可以根据自己的需求来配置</p><ul><li><code>&quot;--compile-commands-dir=build&quot;</code> 选项指定 <code>compile_commands.json</code> 文件的目录。如果在根目录 <code>$SRC</code> 或 <code>$SRC/build</code> 下，clangd 会自动查找，因此可以省略</li></ul><p>如果 clangd 没有默认安装在系统位置，可以通过 <code>clangd.path</code> 来指定 clangd 的路径</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;clangd.path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/clangd&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此外，C/C++ 插件也可以支持 C/C++ 代码补全、语法检查等，需要配置 <code>.vscode/c_cpp_properties.json</code> 文件，但是 clangd 更加强大，因此推荐使用 clangd 插件。</p><details class="details custom-block"><summary>点击查看 <code>.vscode/c_cpp_properties.json</code> 配置参考</summary><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;INSTALL_DIR&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/Users/henryzhu/program&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;configurations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mac&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;includePath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;\${env:INSTALL_DIR}/opencv-4.5.5/include/opencv4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;\${workspaceFolder}/include&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;defines&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;compilerPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/usr/bin/clang&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;cStandard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c17&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;cppStandard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c++17&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;intelliSenseMode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;linux-clang-arm64&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;configurationProvider&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ms-vscode.cmake-tools&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details>`,110)]))}const E=i(t,[["render",p]]);export{g as __pageData,E as default};
