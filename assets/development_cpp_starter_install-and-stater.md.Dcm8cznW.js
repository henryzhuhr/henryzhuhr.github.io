import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ko2zIC2c.js";const t="/assets/vscode-open-remote.Cad1zqSt.png",c=JSON.parse('{"title":"C++ 开发环境准备","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"development/cpp/starter/install-and-stater.md","filePath":"development/cpp/starter/install-and-stater.md","lastUpdated":1745939355000}'),l={name:"development/cpp/starter/install-and-stater.md"};function p(h,s,k,o,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="c-kai-fa-huan-jing-zhun-bei" tabindex="-1">C++ 开发环境准备 <a class="header-anchor" href="#c-kai-fa-huan-jing-zhun-bei" aria-label="Permalink to &quot;C++ 开发环境准备&quot;">​</a></h1><h2 id="ji-yu-rong-qi-de-kai-fa" tabindex="-1">基于容器的开发 <a class="header-anchor" href="#ji-yu-rong-qi-de-kai-fa" aria-label="Permalink to &quot;基于容器的开发&quot;">​</a></h2><h3 id="docker-huan-jing-zhun-bei-he-qi-dong-xiang-mu" tabindex="-1">docker 环境准备和启动项目 <a class="header-anchor" href="#docker-huan-jing-zhun-bei-he-qi-dong-xiang-mu" aria-label="Permalink to &quot;docker 环境准备和启动项目&quot;">​</a></h3><p>按照下列链接中的步骤准备好 docker 环境：</p><ol><li><p><a href="https://henryzhuhr.github.io/hello-docker/starter.html" target="_blank" rel="noreferrer">Docker 环境准备</a></p></li><li><p>VSCode中安装 Docker 插件</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker" target="_blank" rel="noreferrer">Docker</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers" target="_blank" rel="noreferrer">Dev Containers</a></li></ul></li><li><p>编写启动容器的相关配置文件：<code>Dockerfile</code>、<code>docker-compose.yml</code> 和 <code>.devcontainer/devcontainer.json</code></p><p>创建 <code>dockerfiles/Dockerfile</code> 文件，改文件用于构建容器镜像，内容如下</p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ubuntu:24.04</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ARG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> INSTALL_LIST=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ubuntu-server ca-certificates locales zsh&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ARG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> INSTALL_LIST=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$INSTALL_LIST build-essential cmake ninja-build clangd&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ARG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MIRRORS_URL=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mirrors.ustc.edu.cn&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DEBIAN_FRONTEND=noninteractive</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># set -x 选项会使得每个命令在执行前都会被打印出来，报错时会显示是哪个命令出错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> set -x &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sed -i </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s/#force_color_prompt=yes/force_color_prompt=yes/g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${HOME}/.bashrc &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sed -i -e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;s#//.*archive.ubuntu.com#//\${MIRRORS_URL}#g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;s#//ports.ubuntu.com#//\${MIRRORS_URL}#g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /etc/apt/sources.list.d/ubuntu.sources &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    apt-get install -y --no-install-recommends \${INSTALL_LIST} &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    apt-get autoremove -y &amp;&amp; apt-get clean all &amp;&amp; rm -rf /var/lib/apt/lists/* &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    localedef -i zh_CN -c -f UTF-8 -A /usr/share/locale/locale.alias zh_CN.UTF-8</span></span></code></pre></div><p>创建 <code>docker-compose.yml</code> 文件，改文件用于启动容器，内容如下</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">   hello-cpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">         context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">         dockerfile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dockerfiles/Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">hello-cpp-dev:latest</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 构建后镜像的名称和标签</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">root</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;~/.ssh:/root/.ssh:ro&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 挂载宿主机的ssh配置文件，方便推拉代码（只读）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/etc/localtime:/etc/localtime:ro&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 挂载宿主机时间到容器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.:/root/hello-cpp</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 项目代码</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      working_dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/root/hello-cpp</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sleep&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;infinity&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>创建 <code>.devcontainer/docker-compose.json</code> 文件，改文件用于 VSCode 中配置容器启动参数，内容如下</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Existing Docker Compose (Extend)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dockerComposeFile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;../docker-compose.yml&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello-cpp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;workspaceFolder&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/root/hello-cpp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;postCreateCommand&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cat /etc/os-release&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;customizations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;vscode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;extensions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;PKief.material-icon-theme&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;mhutchie.git-graph&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;ms-vscode-remote.remote-containers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;ms-azuretools.vscode-docker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;llvm-vs-code-extensions.vscode-clangd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;twxs.cmake&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;josetr.cmake-language-support-vscode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;ms-vscode.cmake-tools&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>点击VSCode （最）左下角「打开远程窗口」，弹出的命令中，点击「<strong>在容器中重新打开 / Reopen in Container</strong>」</p><p><img src="`+t+`" alt="打开远程窗口"></p></li><li><p>也可以在<strong>命令面板</strong>中搜索并执行命令 「<strong>Dev Containers: Rebuild Container Without Cache / 开发容器：重新生成无缓存的容器</strong>」（特别是修改了 <code>Dockerfile</code> 或 <code>docker-compose.yml</code> 时，必须执行此命令）</p></li></ol><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ul><li>在 VSCode 中键入 <code>Ctrl+Shift+P</code> 调出<strong>命令面板</strong> ，或者在菜单栏中选择 <code>查看(View)</code> -&gt; <code>命令面板(Command Palette)</code> 调出<strong>命令面板</strong></li><li>如果构建失败，可以尝试在 Docker Desktop 中删除对应容器(<code>hello-cpp-ubuntu-dev</code>)和对应镜像(<code>hello-cpp-ubuntu-dev:latest</code>)后重试。如果仍然构建失败，请参考 <a href="https://henryzhuhr.github.io/hello-docker/develop-in-vscode.html#%E4%BD%BF%E7%94%A8-dev-containers-%E6%8F%92%E4%BB%B6%E7%9A%84%E8%BF%87%E7%A8%8B" target="_blank" rel="noreferrer"><em>使用 Dev Containers 插件的过程</em></a> 。</li></ul></div><h3 id="yun-xing-demo" tabindex="-1">运行 demo <a class="header-anchor" href="#yun-xing-demo" aria-label="Permalink to &quot;运行 demo&quot;">​</a></h3><p>进入容器后，在终端中可以通过下面的命令查看当前环境相关信息：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/os-release</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 检查当前系统发行版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uname</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 查看系统架构</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/cpuinfo</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 查看CPU信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/meminfo</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 查看内存信息</span></span></code></pre></div><h3 id="kuo-zhan-kai-fa-huan-jing" tabindex="-1">扩展开发环境 <a class="header-anchor" href="#kuo-zhan-kai-fa-huan-jing" aria-label="Permalink to &quot;扩展开发环境&quot;">​</a></h3><p>如果需要扩展开发环境，可以在 <code>Dockerfile</code> 中添加对应的软件包安装命令，然后执行 <code>Dev Containers: Rebuild Container Without Cache</code> 命令重新构建容器。</p>`,11)]))}const g=i(l,[["render",p]]);export{c as __pageData,g as default};
